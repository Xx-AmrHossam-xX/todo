{"version":3,"sources":["logo.svg","redux/constants/ActionTypes.js","App.js","redux/actions/counterAmountActions.js","reportWebVitals.js","redux/reducers/counter.js","redux/rootReducer.js","redux/reducers/counterAmount.js","redux/store.js","index.js"],"names":["INCREMENT_NUM","DECREMENT_NUM","RESET","CHANGE_AMOUNT","App","amount","useSelector","state","countAmount","shallowEqual","dispatch","useDispatch","className","src","logo","alt","href","target","rel","type","onClick","payload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultVal","counter_one","counter_two","updates","combineReducers","count","action","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"wKAAe,G,MAAA,IAA0B,kC,8BCE5BA,EAAgB,YAChBC,EAAgB,YAChBC,EAAQ,QAERC,EAAgB,gB,WCoCdC,MAlCf,WAEE,IAAQC,EAAWC,aACjB,SAAAC,GAAK,MAAK,CACRF,OAAQE,EAAMC,eAEhBC,KAJMJ,OAOFK,EAAWC,cACjB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,yBAQA,cAAC,IAAD,CAAQC,KAAK,UAAUC,QAAS,kBAAMV,EC9BtC,CACNS,KAAMhB,EACNkB,QD4BkE,MAA5D,4BAGA,8BAAMhB,UExBCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCLRQ,EAAa,CAClBC,YAAa,EACbC,YAAa,EACbC,QAAS,GCEKC,kBAAgB,CAAEC,MDClB,WAA8C,IAA5B7B,EAA2B,uDAAnBwB,EAAYM,EAAO,uCAC3D,OAAQA,EAAOlB,MACd,KAAKnB,EACJ,MAAO,CACNgC,YAAazB,EAAMyB,YAAcK,EAAOhB,QACxCY,YAAa1B,EAAM0B,YAAcI,EAAOhB,QACxCa,QAAS3B,EAAM2B,QAAU,GAE3B,KAAKjC,EACJ,MAAO,CACN+B,YAAazB,EAAMyB,YAAcK,EAAOhB,QACxCY,YAAa1B,EAAM0B,YAAcI,EAAOhB,QACxCa,QAAS3B,EAAM2B,QAAU,GAE3B,KAAKhC,EACJ,OAAgB6B,EAGlB,OAAOxB,GCnBgCC,YCHzB,WAA8C,IAA5BD,EAA2B,uDAFzC,EAEkC8B,EAAO,uCAC3D,OAAQA,EAAOlB,OACThB,EACGkC,EAAOhB,QAGTd,KCLO+B,EAFHC,YAAYC,GCKxBC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.de11bccf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint-disable */\n//Counter Actions\nexport const INCREMENT_NUM = 'INCREMENT';\nexport const DECREMENT_NUM = 'DECREMENT';\nexport const RESET = 'RESET';\n//Counter Value Actions\nexport const CHANGE_AMOUNT = 'CHANGE_AMOUNT';\n/* eslint-enable */\n","import logo from \"./logo.svg\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport { Button } from \"antd\";\n//Redux\nimport { useDispatch, shallowEqual, useSelector } from \"react-redux\";\nimport { changeAmount } from \"./redux/actions/counterAmountActions\";\n\nfunction App (){\n  //Use Selector\n  const { amount } = useSelector(\n    state => ({\n      amount: state.countAmount,\n    }),\n    shallowEqual\n  );\n  // DISPATCH\n  const dispatch = useDispatch();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <Button type=\"primary\" onClick={() => dispatch(changeAmount(10))}>\n          Primary Button\n        </Button>\n        <div>{amount}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { CHANGE_AMOUNT } from '../constants/ActionTypes';\r\n\r\nexport function changeAmount (payload){\r\n\treturn {\r\n\t\ttype: CHANGE_AMOUNT,\r\n\t\tpayload: payload\r\n\t};\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { INCREMENT_NUM, DECREMENT_NUM, RESET } from '../constants/ActionTypes';\n\nconst defaultVal = {\n\tcounter_one: 0,\n\tcounter_two: 0,\n\tupdates: 0\n};\n\nexport default function reducer (state = defaultVal, action){\n\tswitch (action.type) {\n\t\tcase INCREMENT_NUM:\n\t\t\treturn {\n\t\t\t\tcounter_one: state.counter_one + action.payload,\n\t\t\t\tcounter_two: state.counter_two - action.payload,\n\t\t\t\tupdates: state.updates + 1\n\t\t\t};\n\t\tcase DECREMENT_NUM:\n\t\t\treturn {\n\t\t\t\tcounter_one: state.counter_one - action.payload,\n\t\t\t\tcounter_two: state.counter_two + action.payload,\n\t\t\t\tupdates: state.updates + 1\n\t\t\t};\n\t\tcase RESET:\n\t\t\treturn (state = defaultVal);\n\t}\n\n\treturn state;\n}\n","// This will can combine one or more Reducer functions and export it through Redux's combineReducer helper.\nimport { combineReducers } from \"redux\";\n\nimport count from \"./reducers/counter\";\nimport countAmount from \"./reducers/counterAmount\";\n// import secondCounter from './exampleReducer';\n\nexport default combineReducers({ count, countAmount });\n\n// Example for combining multiple reducers:\n// export default combineReducers({ count, secondCounter });\n","import { CHANGE_AMOUNT } from '../constants/ActionTypes';\r\n\r\nconst defaultVal = 1;\r\n\r\nexport default function reducer (state = defaultVal, action){\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_AMOUNT:\r\n\t\t\treturn action.payload;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n","import { createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\"; // Gets the State from the reducer(s)\n\nlet store = createStore(rootReducer); // Creates the store from the State received from the reducer(s)\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}