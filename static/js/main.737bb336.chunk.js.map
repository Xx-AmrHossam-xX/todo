{"version":3,"sources":["redux/addDrawer/actionTypes.js","redux/addDrawer/actions.js","components/NoData/NoData.js","redux/todoList/actionTypes.js","components/AddDrawer/AddDrawer.js","redux/todoList/actions.js","components/TodoList/TodoList.js","App.js","reportWebVitals.js","redux/todoList/reducers.js","redux/addDrawer/reducers.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["TOGGLE_DRAWER","toggleDrawer","type","NoData","dispatch","useDispatch","image","imageStyle","height","description","onClick","ADD","CHANGE_STATUS","RESET_CHANGED_ID","Option","Select","validateMessages","required","AddDrawer","status","useSelector","state","shallowEqual","formRef","useRef","useState","startDate","setStartDate","endDate","setEndDate","title","onClose","visible","bodyStyle","paddingBottom","labelCol","span","wrapperCol","name","onFinish","values","task","id","uuid","current","resetFields","ref","Item","label","rules","placeholder","value","Group","message","onChange","date","dateString","getPopupContainer","trigger","parentElement","disabledDate","d","isSameOrBefore","isSameOrAfter","TextArea","rows","justify","htmlType","TodoList","todoList","list","changedTaskId","changedId","priority","setList","sortValue","setSortValue","changeStatusHandler","changeStatus","useEffect","newList","sort","a","b","from","toDate","className","allowClear","style","width","map","xs","sm","assignee","toLocaleDateString","year","month","day","to","offset","defaultValue","App","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultVal","action","combineReducers","i","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.737bb336.chunk.js","sourcesContent":["const TOGGLE_DRAWER = \"TOGGLE_DRAWER\";\nexport default TOGGLE_DRAWER;\n","import TOGGLE_DRAWER from \"./actionTypes\";\n\nfunction toggleDrawer (){\n  return {\n    type: TOGGLE_DRAWER,\n  };\n}\n\nexport default toggleDrawer;\n","// Libraries\r\nimport { Empty, Button } from \"antd\";\r\n//Redux\r\nimport { useDispatch } from \"react-redux\";\r\nimport toggleDrawer from \"../../redux/addDrawer/actions\";\r\n\r\nfunction NoData (){\r\n  // DISPATCH\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Empty\r\n      image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\r\n      imageStyle={{\r\n        height: 60,\r\n      }}\r\n      description={<span>There is nothing in the list</span>}\r\n    >\r\n      <Button type=\"primary\" onClick={() => dispatch(toggleDrawer())}>\r\n        Add\r\n      </Button>\r\n    </Empty>\r\n  );\r\n}\r\nexport default NoData;\r\n","//Counter Actions\nexport const ADD = \"ADD\";\nexport const CHANGE_STATUS = \"CHANGE_STATUS\";\nexport const RESET_CHANGED_ID = \"RESET_CHANGED_ID\";\n","import { useState, useRef } from \"react\";\r\n// libraries\r\nimport {\r\n  Drawer,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  DatePicker,\r\n  Space,\r\n  Row,\r\n  Radio,\r\n} from \"antd\";\r\nimport uuid from \"react-uuid\";\r\n//Redux\r\nimport { useDispatch, shallowEqual, useSelector } from \"react-redux\";\r\nimport toggleDrawer from \"../../redux/addDrawer/actions\";\r\nimport { add } from \"../../redux/todoList/actions\";\r\n\r\nconst { Option } = Select;\r\n/* eslint-disable no-template-curly-in-string */\r\nconst validateMessages = {\r\n  required: \"${label} is required!\",\r\n};\r\n\r\nfunction AddDrawer (){\r\n  //Use Selector\r\n  const { status } = useSelector(\r\n    state => ({\r\n      status: state.toggleDrawer.status,\r\n    }),\r\n    shallowEqual\r\n  );\r\n  // DISPATCH\r\n  const dispatch = useDispatch();\r\n  // Ref\r\n  const formRef = useRef();\r\n  // Actions\r\n  const [ startDate, setStartDate ] = useState();\r\n  function startDateChange (date, dateString){\r\n    setStartDate(dateString);\r\n  }\r\n  const [ endDate, setEndDate ] = useState(\"2090-12-09\");\r\n  function endDateChange (date, dateString){\r\n    setEndDate(dateString);\r\n  }\r\n  const onFinish = values => {\r\n    dispatch(add({ ...values, id: uuid() }));\r\n    formRef.current.resetFields();\r\n    dispatch(toggleDrawer());\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      title=\"Create a new task\"\r\n      onClose={() => dispatch(toggleDrawer())}\r\n      visible={status}\r\n      bodyStyle={{ paddingBottom: 10 }}\r\n    >\r\n      <Form\r\n        labelCol={{\r\n          span: 7,\r\n        }}\r\n        wrapperCol={{\r\n          span: 24,\r\n        }}\r\n        name=\"nest-messages\"\r\n        onFinish={onFinish}\r\n        validateMessages={validateMessages}\r\n        ref={formRef}\r\n      >\r\n        <Form.Item name=\"title\" label=\"Title\" rules={[ { required: true } ]}>\r\n          <Input placeholder=\"Please enter title\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"assignee\"\r\n          label=\"Assignee\"\r\n          rules={[ { required: true } ]}\r\n        >\r\n          <Select placeholder=\"Please choose the assignee\">\r\n            <Option value=\"jack\">Jack Ma</Option>\r\n            <Option value=\"tom\">Tom Liu</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item name=\"status\" label=\"Status\" rules={[ { required: true } ]}>\r\n          <Select placeholder=\"Please choose a status\">\r\n            <Option value={2}>Todo</Option>\r\n            <Option value={1}>InProgress</Option>\r\n            <Option value={0}>Done</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"priority\"\r\n          label=\"Priority\"\r\n          rules={[ { required: true } ]}\r\n        >\r\n          <Radio.Group>\r\n            <Radio value={2}>High</Radio>\r\n            <Radio value={1}>Medium</Radio>\r\n            <Radio value={0}>Low</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"from\"\r\n          label=\"From\"\r\n          rules={[ { required: true, message: \"Please choose a start date\" } ]}\r\n        >\r\n          <DatePicker\r\n            onChange={startDateChange}\r\n            getPopupContainer={trigger => trigger.parentElement}\r\n            disabledDate={d => !d || !d.isSameOrBefore(endDate)}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"to\"\r\n          label=\"To\"\r\n          rules={[ { required: true, message: \"Please choose an end date\" } ]}\r\n        >\r\n          <DatePicker\r\n            onChange={endDateChange}\r\n            getPopupContainer={trigger => trigger.parentElement}\r\n            disabledDate={d => !d || !d.isSameOrAfter(startDate)}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input.TextArea rows={6} placeholder=\"please enter description\" />\r\n        </Form.Item>\r\n        <Row justify=\"end\">\r\n          <Space>\r\n            <Button onClick={() => dispatch(toggleDrawer())}>Cancel</Button>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Create\r\n            </Button>\r\n          </Space>\r\n        </Row>\r\n      </Form>\r\n    </Drawer>\r\n  );\r\n}\r\nexport default AddDrawer;\r\n","import { ADD, CHANGE_STATUS, RESET_CHANGED_ID } from \"./actionTypes\";\n\nexport function add (task){\n  return {\n    type: ADD,\n    task,\n  };\n}\n\nexport function changeStatus (id, value){\n  return {\n    type: CHANGE_STATUS,\n    id,\n    value,\n  };\n}\nexport function ResetChangedId (){\n  return {\n    type: RESET_CHANGED_ID,\n  };\n}\n","import { useEffect, useState } from \"react\";\r\n// Libraries\r\nimport { Button, Select, Form, Row, Col } from \"antd\";\r\n//Redux\r\nimport { useDispatch, shallowEqual, useSelector } from \"react-redux\";\r\nimport { changeStatus, ResetChangedId } from \"../../redux/todoList/actions\";\r\nimport toggleDrawer from \"../../redux/addDrawer/actions\";\r\n// Css\r\nimport \"./TodoList.css\";\r\n\r\nconst { Option } = Select;\r\n\r\nfunction TodoList (){\r\n  // Use Selector\r\n  const { todoList, changedTaskId } = useSelector(\r\n    state => ({\r\n      todoList: state.todoList.list,\r\n      changedTaskId: state.todoList.changedId,\r\n    }),\r\n    shallowEqual\r\n  );\r\n  // DISPATCH\r\n  const dispatch = useDispatch();\r\n  // Constants\r\n  const status = [ \"Done\", \"InProgress\", \"Todo\" ];\r\n  const priority = [ \"Low\", \"Medium\", \"High\" ];\r\n  // Local variables\r\n  const [ list, setList ] = useState([]);\r\n  const [ sortValue, setSortValue ] = useState();\r\n  // Actions\r\n  function changeStatusHandler (id, value){\r\n    dispatch(ResetChangedId());\r\n    dispatch(changeStatus(id, value));\r\n  }\r\n  useEffect(\r\n    () => {\r\n      const newList = [ ...todoList ];\r\n      switch (sortValue) {\r\n        case \"priority\":\r\n          newList.sort((a, b) => b.priority - a.priority);\r\n          setList(newList);\r\n          break;\r\n        case \"status\":\r\n          newList.sort((a, b) => b.status - a.status);\r\n          setList(newList);\r\n          break;\r\n        case \"date\":\r\n          newList.sort((a, b) => a.from.toDate() - b.from.toDate());\r\n          setList(newList);\r\n          break;\r\n        default:\r\n          setList(todoList);\r\n          break;\r\n      }\r\n    },\r\n    [ todoList, sortValue, changedTaskId ]\r\n  );\r\n  return (\r\n    <div>\r\n      <header className=\"list-header\">\r\n        <Form className=\"sort-form\">\r\n          <Form.Item name=\"sort\" label=\"Sort by \">\r\n            <Select\r\n              allowClear\r\n              placeholder=\"criteria\"\r\n              style={{ width: 120 }}\r\n              value={sortValue}\r\n              onChange={value => setSortValue(value)}\r\n            >\r\n              <Option value={\"priority\"}>priority</Option>\r\n              <Option value={\"status\"}>status</Option>\r\n              <Option value={\"date\"}>date</Option>\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n        <Button type=\"primary\" onClick={() => dispatch(toggleDrawer())}>\r\n          Add\r\n        </Button>\r\n      </header>\r\n      <ul className=\"todo-list\">\r\n        {list.map(task => (\r\n          <li key={task.id} className=\"todo-list-item\">\r\n            <h3>{task.title}</h3>\r\n            <p>{task.description}</p>\r\n            <Row>\r\n              <Col xs={{ span: 12 }} sm={{ span: 8 }}>\r\n                <div> Assignee : {task.assignee}</div>\r\n                <div> Priority : {priority[task.priority]}</div>\r\n                <div> Status : {status[task.status]}</div>\r\n              </Col>\r\n              <Col xs={{ span: 12 }} sm={{ span: 8 }}>\r\n                <div>\r\n                  from :{\" \"}\r\n                  {task.from.toDate().toLocaleDateString(\"en-GB\", {\r\n                    year: \"numeric\",\r\n                    month: \"numeric\",\r\n                    day: \"numeric\",\r\n                  })}\r\n                </div>\r\n                <div>\r\n                  to :{\" \"}\r\n                  {task.to.toDate().toLocaleDateString(\"en-GB\", {\r\n                    year: \"numeric\",\r\n                    month: \"numeric\",\r\n                    day: \"numeric\",\r\n                  })}\r\n                </div>\r\n              </Col>\r\n              <Col xs={{ span: 12, offset: 12 }} sm={{ span: 8, offset: 0 }}>\r\n                <Select\r\n                  defaultValue={task.status}\r\n                  style={{ width: 120 }}\r\n                  onChange={value => changeStatusHandler(task.id, value)}\r\n                >\r\n                  <Option value={2}>Todo</Option>\r\n                  <Option value={1}>InProgress</Option>\r\n                  <Option value={0}>Done</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\nexport default TodoList;\r\n","// Components\nimport NoData from \"./components/NoData/NoData\";\nimport AddDrawer from \"./components/AddDrawer/AddDrawer\";\nimport TodoList from \"./components/TodoList/TodoList\";\n//Redux\nimport { shallowEqual, useSelector } from \"react-redux\";\n// Css\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nfunction App (){\n  //Use Selector\n  const { todoList } = useSelector(\n    state => ({\n      todoList: state.todoList.list,\n    }),\n    shallowEqual\n  );\n\n  return (\n    <div className=\"todo-wrapper\">\n      <h1>Todo</h1>\n      {todoList.length === 0 ? <NoData /> : <TodoList />}\n      <AddDrawer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD, CHANGE_STATUS, RESET_CHANGED_ID } from \"./actionTypes\";\n\nconst defaultVal = {\n  list: [],\n  changedId: \"\",\n};\n\nexport default function reducer (state = defaultVal, action){\n  switch (action.type) {\n    case ADD:\n      return {\n        ...state,\n        list: [ ...state.list, action.task ],\n      };\n    case CHANGE_STATUS:\n      const newList = state.list;\n      for (let i = 0; i < newList.length; i++) {\n        if (action.id === newList[i].id) {\n          newList[i].status = action.value;\n          break;\n        }\n      }\n      return {\n        ...state,\n        list: newList,\n        changedId: action.id,\n      };\n    case RESET_CHANGED_ID:\n      return {\n        ...state,\n        changedId: \"\",\n      };\n    default:\n      return state;\n  }\n}\n","import TOGGLE_DRAWER from \"./actionTypes\";\n\nconst defaultVal = {\n  status: false,\n};\n\nfunction toggleDrawer (state = defaultVal, action){\n  switch (action.type) {\n    case TOGGLE_DRAWER:\n      return {\n        status: !state.status,\n      };\n    default:\n      return state;\n  }\n}\nexport default toggleDrawer;\n","import { combineReducers } from \"redux\";\nimport todoList from \"./todoList/reducers\";\nimport toggleDrawer from \"./addDrawer/reducers\";\n\nexport default combineReducers({ todoList, toggleDrawer });\n","import { createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\";\n\nlet store = createStore(rootReducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}